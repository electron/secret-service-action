name: OIDC Secret Exchange
description: Exchange GitHub Actions OIDC token for secrets

inputs:
  endpoint:
    description: The secret service endpoint to exchange the OIDC token for secrets
    required: false
    default: https://electron-secret-service-dc455692df42.herokuapp.com/exchange

outputs:
  secrets:
    description: The returned secrets (masked in GHA) in JSON format
    value: ${{ steps.exchange.outputs.secrets }}

runs:
  using: composite
  steps:
    - name: Exchange OIDC token for secrets
      id: exchange
      shell: bash
      env:
        AUDIENCE: electron-secret-service
        SECRETS_ENDPOINT: ${{ inputs.endpoint }}
      run: |
        set -euo pipefail
        # Request GitHub OIDC token with custom audience
        OIDC_TOKEN=$(curl -sS -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=$AUDIENCE" | jq -r '.value // empty')
        if [[ -z "$OIDC_TOKEN" ]]; then
          echo "::error::Failed to get OIDC token from GitHub"
          exit 1
        fi
        # Exchange OIDC token for secrets
        RESPONSE=$(curl -sS -X POST \
          -H "Content-Type: application/json" \
          -w "\n%{http_code}" \
          -d '{"token":"'$OIDC_TOKEN'"}' \
          "$SECRETS_ENDPOINT")
        # Extract status code and body
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        if [[ "$HTTP_CODE" != "200" ]]; then
          echo "::error::Failed to exchange token. Status: $HTTP_CODE"
          exit 1
        fi
        # Extract and mask the secrets
        readarray -t SECRET_VALUES < <(echo "$BODY" | jq -r 'values | .[]')
        for secret in "${SECRET_VALUES[@]}"; do
          echo "::add-mask::$secret"
        done
        echo "secrets=$BODY" >> $GITHUB_OUTPUT
